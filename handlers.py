from aiogram import F
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from utils import load_json, save_settings, is_time_in_range, get_weekday_name, get_weather
from datetime import datetime

# –î–∞–Ω—ñ
LESSONS = load_json('lessons.json')
HOLIDAYS = load_json('holidays.json')
settings = load_json('user_settings.json')

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='üìÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ'), KeyboardButton(text='üìÜ –ß–∞—Å —É—Ä–æ–∫—ñ–≤')],
        [KeyboardButton(text='üéâ –°–≤—è—Ç–∞'), KeyboardButton(text='‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è')],
        [KeyboardButton(text='üßπ –û—á–∏—Å—Ç–∏—Ç–∏ —á–∞—Ç')],
    ],
    resize_keyboard=True
)

# –¢–∏–ø–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def default_user_conf():
    return {
        'morning_digest': True,
        'morning_time': '06:00',
        'notify_start': True,
        'notify_end': True,
        'sound': True
    }

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
def get_settings_kb(conf):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"–†–∞–Ω–∫–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ ({conf['morning_time']}): {'‚úÖ' if conf['morning_digest'] else '‚ùå'}",
                callback_data='toggle_morning'
            )
        ],
        [
            InlineKeyboardButton(
                text=f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä—Ç—É —É—Ä–æ–∫—É: {'‚úÖ' if conf['notify_start'] else '‚ùå'}",
                callback_data='toggle_start'
            )
        ],
        [
            InlineKeyboardButton(
                text=f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫—ñ–Ω—Ü—è —É—Ä–æ–∫—É: {'‚úÖ' if conf['notify_end'] else '‚ùå'}",
                callback_data='toggle_end'
            )
        ],
        [
            InlineKeyboardButton(
                text=f"–ó–≤—É–∫: {'üîä' if conf['sound'] else 'üîá'}",
                callback_data='toggle_sound'
            )
        ]
    ])

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
def register_handlers(dp, bot, settings):
    dp.message.register(start_cmd, Command('start'))
    dp.message.register(text_menu, F.text == '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è')
    dp.callback_query.register(toggle_setting)
    dp.message.register(today_schedule, F.text == 'üìÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ')
    dp.message.register(full_schedule, F.text == 'üìÜ –ß–∞—Å —É—Ä–æ–∫—ñ–≤')
    dp.message.register(today_holidays, F.text == 'üéâ –°–≤—è—Ç–∞')
    dp.message.register(clear_chat, F.text == 'üßπ –û—á–∏—Å—Ç–∏—Ç–∏ —á–∞—Ç')

# /start
async def start_cmd(message: Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-–¥–∞—Ç–Ω–∏–∫ ü§ñ", reply_markup=main_kb)

# –ú–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
async def text_menu(message: Message):
    uid = str(message.from_user.id)
    conf = settings.get(uid, default_user_conf())
    await message.answer("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:", reply_markup=get_settings_kb(conf))

# –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
async def toggle_setting(query: CallbackQuery):
    uid = str(query.from_user.id)
    conf = settings.get(uid, default_user_conf())

    if query.data == 'toggle_morning':
        conf['morning_digest'] = not conf['morning_digest']
    elif query.data == 'toggle_start':
        conf['notify_start'] = not conf['notify_start']
    elif query.data == 'toggle_end':
        conf['notify_end'] = not conf['notify_end']
    elif query.data == 'toggle_sound':
        conf['sound'] = not conf['sound']

    settings[uid] = conf
    save_settings(settings)
    await query.answer("–û–Ω–æ–≤–ª–µ–Ω–æ")
    await query.message.edit_reply_markup(reply_markup=get_settings_kb(conf))

# –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
async def today_schedule(message: Message):
    day = get_weekday_name()
    lessons = LESSONS['lessons'].get(day, [])
    if lessons:
        text = f"<b>{day}</b>\n" + '\n'.join(f"{i+1}. {l}" for i, l in enumerate(lessons))
    else:
        text = f"<b>{day}</b>\n–í–∏—Ö—ñ–¥–Ω–∏–π üòé"
    await message.answer(text)

# –ß–∞—Å —É—Ä–æ–∫—ñ–≤
async def full_schedule(message: Message):
    now = datetime.now().time()
    lines = []
    for i, interval in enumerate(LESSONS['time_lessons']):
        mark = ' üü¢' if is_time_in_range(interval, now) else ''
        lines.append(f"{i+1}. {interval}{mark}")
    await message.answer("<b>–ß–∞—Å —É—Ä–æ–∫—ñ–≤</b>\n" + '\n'.join(lines))

# –°–≤—è—Ç–∞
async def today_holidays(message: Message):
    today = datetime.now().strftime('%m-%d')
    hol = HOLIDAYS.get(today, [])
    if hol:
        text = '<b>–°–≤—è—Ç–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:</b>\n' + '\n'.join(f"{h}" for h in hol)
    else:
        text = '–°—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î —Å–≤—è—Ç!'
    await message.answer(text)

# –û—á–∏—â–µ–Ω–Ω—è —á–∞—Ç—É
async def clear_chat(message: Message):
    chat_id = message.chat.id
    last_msg_id = message.message_id
    await message.answer("–û—á–∏—â–∞—é —á–∞—Ç...")
    for _ in range(100):
        try:
            await message.bot.delete_message(chat_id, last_msg_id)
        except:
            pass
        last_msg_id -= 1
    await message.answer("–ß–∞—Ç –æ—á–∏—â–µ–Ω–æ!", reply_markup=main_kb)
